name: Build iOS App

on:
  push:
    branches: [ main, develop, dev ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-ios:
    name: Build iOS App
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install npm dependencies
        run: |
          npm cache clean --force
          npm install --legacy-peer-deps
          npm config set legacy-peer-deps true

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod --version

      - name: Install CocoaPods dependencies
        working-directory: ./ios
        run: |
          # Clean previous pod installations to ensure fresh setup
          rm -rf Pods Podfile.lock
          
          # Verify Podfile exists and has our fixes
          echo "Checking Podfile..."
          if grep -q "RNEnxRtc" Podfile; then
            echo "✅ Podfile contains RNEnxRtc fixes"
          fi
          if grep -q "EXCLUDED_ARCHS" Podfile; then
            echo "✅ Podfile contains EXCLUDED_ARCHS fixes"
          fi
          
          # Install pods (this will apply our Podfile fixes)
          echo "Installing pods and applying Podfile fixes..."
          pod install --repo-update 2>&1 | tee pod-install.log
          
          # Check if post_install hook ran (look for our fix messages)
          if grep -q "Fixed RNEnxRtc" pod-install.log 2>/dev/null; then
            echo "✅ Podfile post_install hook executed successfully"
            grep "Fixed RNEnxRtc" pod-install.log
          else
            echo "⚠️ Warning: Podfile post_install fixes may not have been applied"
          fi
          
          # Wait a moment for filesystem to sync
          sleep 2
          
          # Verify pod install completed successfully
          echo "Checking for workspace file..."
          if [ -e "Dadio.xcworkspace" ]; then
            echo "✅ Workspace file exists: Dadio.xcworkspace"
            ls -ld Dadio.xcworkspace
          else
            echo "⚠️ Workspace not found immediately after pod install"
            echo "Current directory: $(pwd)"
            echo "Files in ios directory:"
            ls -la | head -20
            echo ""
            echo "Looking for .xcworkspace files:"
            find . -name "*.xcworkspace" 2>/dev/null | head -5 || echo "No .xcworkspace found"
            echo ""
            echo "Retrying after 2 seconds..."
            sleep 2
            if [ -e "Dadio.xcworkspace" ]; then
              echo "✅ Workspace found on retry"
            else
              echo "❌ Workspace still not found - this may cause build to fail"
            fi
          fi
          
          echo "✅ Pod install step completed"

      - name: Verify Podfile fixes applied
        working-directory: ./ios
        run: |
          echo "Verifying Podfile post_install fixes were applied..."
          
          # Check if RNEnxRtc target exists and has correct settings
          if [ -d "Pods/Target Support Files/RNEnxRtc" ]; then
            echo "RNEnxRtc pod found"
            # Check xcconfig files
            for xcconfig in "Pods/Target Support Files/RNEnxRtc"/*.xcconfig; do
              if [ -f "$xcconfig" ]; then
                echo "Checking $(basename $xcconfig)..."
                if grep -q "EXCLUDED_ARCHS.*arm64.*x86_64" "$xcconfig" 2>/dev/null; then
                  echo "⚠️ WARNING: Found invalid EXCLUDED_ARCHS in $xcconfig"
                  echo "Contents:"
                  grep "EXCLUDED_ARCHS" "$xcconfig"
                else
                  echo "✅ No invalid EXCLUDED_ARCHS found"
                fi
              fi
            done
          else
            echo "RNEnxRtc pod directory not found (may not be installed)"
          fi
          
          # Check project file for architecture settings
          if [ -f "Pods/Pods.xcodeproj/project.pbxproj" ]; then
            echo "Checking Pods project for RNEnxRtc architecture settings..."
            if grep -A 5 "RNEnxRtc.*=" "Pods/Pods.xcodeproj/project.pbxproj" | grep -q "EXCLUDED_ARCHS.*arm64.*x86_64"; then
              echo "⚠️ WARNING: Invalid EXCLUDED_ARCHS found in project file"
            else
              echo "✅ Project file looks good"
            fi
          fi

      - name: List available simulators
        run: |
          xcrun simctl list devices available | head -30

      - name: Manual architecture fix (fallback)
        working-directory: ./ios
        run: |
          echo "Applying manual architecture fix as fallback..."
          
          # Use Python to fix the project file if needed
          python3 << 'EOF'
          import re
          import sys
          
          project_file = "Pods/Pods.xcodeproj/project.pbxproj"
          try:
              with open(project_file, 'r') as f:
                  content = f.read()
              
              # Count occurrences of invalid EXCLUDED_ARCHS
              invalid_pattern = r'EXCLUDED_ARCHS.*=.*\([^)]*arm64[^)]*x86_64[^)]*\)'
              matches = re.findall(invalid_pattern, content)
              
              if matches:
                  print(f"Found {len(matches)} invalid EXCLUDED_ARCHS settings")
                  # Remove invalid EXCLUDED_ARCHS lines that exclude both architectures
                  content = re.sub(
                      r'(\s+)EXCLUDED_ARCHS\[sdk=iphonesimulator\*\][^;]*=.*\([^)]*arm64[^)]*x86_64[^)]*\);',
                      r'\1EXCLUDED_ARCHS[sdk=iphonesimulator*] = ();',
                      content,
                      flags=re.MULTILINE
                  )
                  content = re.sub(
                      r'(\s+)EXCLUDED_ARCHS[^;]*=.*\([^)]*arm64[^)]*x86_64[^)]*\);',
                      r'',
                      content,
                      flags=re.MULTILINE
                  )
                  
                  with open(project_file, 'w') as f:
                      f.write(content)
                  print("✅ Fixed invalid EXCLUDED_ARCHS in project file")
              else:
                  print("✅ No invalid EXCLUDED_ARCHS found (or already fixed)")
          except Exception as e:
              print(f"⚠️ Could not fix project file: {e}")
              sys.exit(0)  # Don't fail the build if this step fails
          EOF

      - name: Verify workspace exists before build
        working-directory: ./ios
        run: |
          echo "Verifying workspace before build..."
          if [ ! -e "Dadio.xcworkspace" ]; then
            echo "❌ Error: Workspace file not found!"
            echo "Current directory: $(pwd)"
            echo "Contents:"
            ls -la
            exit 1
          fi
          echo "✅ Workspace verified: Dadio.xcworkspace exists"

      - name: Build iOS App (Debug - Simulator)
        working-directory: ./ios
        continue-on-error: true
        run: |
          # Clean build folder
          rm -rf build
          
          # Build for simulator with detailed error output
          echo "Starting xcodebuild..."
          echo "Working directory: $(pwd)"
          echo "Workspace: $(pwd)/Dadio.xcworkspace"
          echo "Scheme: Dadio"
          
          # Double-check workspace exists
          if [ ! -e "Dadio.xcworkspace" ]; then
            echo "❌ Fatal: Workspace not found before build!"
            exit 1
          fi
          
          # Build and capture output
          xcodebuild -workspace Dadio.xcworkspace \
            -scheme Dadio \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 16' \
            -derivedDataPath ./build \
            CODE_SIGNING_ALLOWED=NO \
            clean build 2>&1 | tee build.log
            
          build_status=${PIPESTATUS[0]}
          
          if [ $build_status -ne 0 ]; then
            echo ""
            echo "❌ Build failed with exit code $build_status"
            echo ""
            echo "=== Searching for actual errors ==="
            
            # Count failures
            failure_count=$(grep -i "error:\|failed\|failure" build.log | wc -l | tr -d ' ')
            echo "Found approximately $failure_count error/failure occurrences"
            echo ""
            
            # Look for the actual build summary
            if grep -q "BUILD\|failures\|succeeded" build.log -i; then
              echo "=== Build Summary ==="
              grep -i "BUILD.*\|failures\|succeeded" build.log | tail -10
              echo ""
            fi
            
            # Look for common error patterns
            if grep -q "error:" build.log; then
              echo "=== Compilation Errors (last 50) ==="
              grep -i "error:" build.log | tail -50
              echo ""
            fi
            
            if grep -q "failed\|failure" build.log -i; then
              echo "=== Build Failures (last 30) ==="
              grep -i "failed\|failure" build.log | tail -30
              echo ""
            fi
            
            if grep -q "undefined\|undefined symbol\|ld:.*undefined" build.log -i; then
              echo "=== Linking Errors (last 30) ==="
              grep -i "undefined\|undefined symbol\|ld:" build.log | tail -30
              echo ""
            fi
            
            if grep -q "architecture\|EXCLUDED_ARCHS\|ARCHS.*valid" build.log -i; then
              echo "=== Architecture Errors (last 20) ==="
              grep -i "architecture\|EXCLUDED_ARCHS\|ARCHS.*valid" build.log | tail -20
              echo ""
            fi
            
            # Show what targets failed
            if grep -q "in target" build.log; then
              echo "=== Failed Targets ==="
              grep "in target" build.log | grep -i "error\|fail" | tail -20
              echo ""
            fi
            
            # Show context around errors
            echo "=== Final Build Output (last 200 lines) ==="
            tail -200 build.log
            
            echo ""
            echo "📋 Full build log saved to: ios/build.log"
            echo "Download the build-log artifact to see complete error details"
            
            exit $build_status
          else
            echo "✅ Build completed successfully!"
            # Verify build actually succeeded
            if grep -q "BUILD SUCCEEDED" build.log; then
              echo "✅ Verified: BUILD SUCCEEDED in log"
            fi
          fi

      - name: Upload build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log-${{ github.run_number }}
          path: ios/build.log
          if-no-files-found: ignore
          retention-days: 7

      - name: Extract and show build failures
        if: failure()
        working-directory: ./ios
        run: |
          if [ -f "build.log" ]; then
            echo "=== Analyzing Build Failures ==="
            echo ""
            
            # Find the actual failure messages
            echo "1. Searching for error: lines..."
            grep -n "error:" build.log | tail -20 || echo "No 'error:' found"
            echo ""
            
            echo "2. Searching for failure patterns..."
            grep -B 5 -A 5 "failed\|failure" build.log | tail -40 || echo "No failures found"
            echo ""
            
            echo "3. Searching for specific targets that failed..."
            grep -B 10 "in target.*from project" build.log | grep -E "(error:|failed|failure)" | tail -30 || echo "No target-specific failures found"
            echo ""
            
            echo "4. Last 50 lines of build log:"
            tail -50 build.log
          fi

      - name: Archive iOS (Release)
        if: github.event_name == 'workflow_dispatch'
        working-directory: ./ios
        run: |
          xcodebuild -workspace Dadio.xcworkspace \
            -scheme Dadio \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath ./build/Dadio.xcarchive \
            CODE_SIGNING_ALLOWED=NO \
            clean archive
        continue-on-error: true

      - name: Export IPA (if archive exists)
        if: github.event_name == 'workflow_dispatch' && success()
        working-directory: ./ios
        run: |
          if [ -d "build/Dadio.xcarchive" ]; then
            echo "✅ Archive created successfully at build/Dadio.xcarchive"
            echo "📦 Archive is available for download in artifacts"
            # IPA export would require export options plist and signing
            # For now, the archive is available for download
          else
            echo "⚠️ Archive not found"
          fi
        continue-on-error: true

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-${{ github.run_number }}
          path: |
            ios/build/
            ios/Pods/
          retention-days: 7
          if-no-files-found: ignore

      - name: Check build result
        id: build_result
        if: always()
        working-directory: ./ios
        run: |
          if [ -f "build.log" ]; then
            # Check if build actually succeeded
            if grep -q "(2 failures)\|error:\|failed" build.log; then
              echo "status=failed" >> $GITHUB_OUTPUT
              echo "❌ Build has failures"
            elif grep -q "BUILD SUCCEEDED\|** BUILD SUCCEEDED **" build.log; then
              echo "status=success" >> $GITHUB_OUTPUT
              echo "✅ Build succeeded"
            else
              echo "status=unknown" >> $GITHUB_OUTPUT
              echo "⚠️ Could not determine build status"
            fi
          else
            echo "status=no_log" >> $GITHUB_OUTPUT
            echo "⚠️ Build log not found"
          fi

      - name: Build summary
        if: always()
        run: |
          BUILD_STATUS="${{ steps.build_result.outputs.status }}"
          JOB_STATUS="${{ job.status }}"
          
          echo "Build Status: ${BUILD_STATUS}"
          echo "Job Status: ${JOB_STATUS}"
          echo ""
          
          if [ "${BUILD_STATUS}" == "success" ] || [ "${JOB_STATUS}" == "success" ]; then
            echo "✅ iOS build completed successfully!"
          echo "📱 Download artifacts from the Actions tab"
          echo "📦 Build artifacts will be available for 7 days"
          else
            echo "❌ iOS build failed"
            echo ""
            echo "To debug:"
            echo "1. Check the 'Build iOS App' step for error details"
            echo "2. Download the build-log artifact (if available)"
            echo "3. Look for compilation or linking errors above"
            echo ""
            echo "Common issues:"
            echo "- Missing dependencies"
            echo "- Architecture mismatches"
            echo "- Code signing errors"
            echo "- Linking errors"
          fi
          echo ""
          echo "Project: Dadio iOS"
          echo "Workspace: ios/Dadio.xcworkspace"
          echo "Scheme: Dadio"
          echo "Configuration: Debug"
