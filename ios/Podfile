# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!

# Enable modular headers for Swift pods that depend on Objective-C pods
use_modular_headers!

# If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.
# because `react-native-flipper` depends on (FlipperKit,...) that will be excluded
#
# To fix this you can also exclude `react-native-flipper` using a `react-native.config.js`
# ```js
# module.exports = {
#   dependencies: {
#     ...(process.env.NO_FLIPPER ? { 'react-native-flipper': { platforms: { ios: null } } } : {}),
# ```
flipper_config = ENV['NO_FLIPPER'] == "1" ? FlipperConfiguration.disabled : FlipperConfiguration.enabled

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'Dadio' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    :flipper_configuration => flipper_config,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  target 'DadioTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )
    
    # Fix FlipperKit compilation errors with Xcode 16.4+
    # Add missing #include <functional> to FlipperTransportTypes.h
    flipper_transport_types_path = File.join(installer.sandbox.root, 'Headers/Private/Flipper/FlipperTransportTypes.h')
    if File.exist?(flipper_transport_types_path)
      content = File.read(flipper_transport_types_path)
      unless content.include?('#include <functional>')
        # Insert #include <functional> after the last #include statement
        lines = content.lines
        last_include_index = lines.rindex { |line| line.strip.start_with?('#include') }
        if last_include_index
          lines.insert(last_include_index + 1, "#include <functional>\n")
          File.write(flipper_transport_types_path, lines.join)
          puts "  Fixed FlipperTransportTypes.h: Added missing #include <functional>"
        end
      end
    end
    
    # Fix RNImageCropPicker compatibility with TOCropViewController
    # The customAspectRatio property doesn't exist in newer versions of TOCropViewController
    image_crop_picker_path = File.join(__dir__, '..', 'node_modules', 'react-native-image-crop-picker', 'ios', 'src', 'ImageCropPicker.m')
    if File.exist?(image_crop_picker_path)
      content = File.read(image_crop_picker_path)
      if content.include?('cropVC.customAspectRatio = aspectRatio;')
        # Comment out the problematic line - aspect ratio can be set via other TOCropViewController APIs
        content = content.gsub(
          /(\s*)cropVC\.customAspectRatio\s*=\s*aspectRatio;/,
          '\1// Fixed: customAspectRatio property not available in this TOCropViewController version\n\1// cropVC.customAspectRatio = aspectRatio;'
        )
        File.write(image_crop_picker_path, content)
        puts "  Fixed RNImageCropPicker: Commented out unsupported customAspectRatio property"
      end
    end
    
    # Also fix project-level settings for RNEnxRtc architecture issues
    installer.pods_project.build_configurations.each do |config|
      # Clear any project-level EXCLUDED_ARCHS that might affect RNEnxRtc
      config.build_settings.keys.each do |key|
        if key.to_s.include?('EXCLUDED_ARCHS')
          excluded = config.build_settings[key]
          if excluded.is_a?(Array) && excluded.include?('arm64') && excluded.include?('x86_64')
            config.build_settings[key] = nil
          end
        end
      end
    end
    
    # Fix deployment target warnings by setting minimum iOS version to 13.4 (matching React Native 0.73.3 requirement)
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # Fix deployment target
        if config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'].to_f < 13.4
          config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.4'
        end
        
        # Fix architecture issues - critical for RNEnxRtc and similar pods
        # Check all possible EXCLUDED_ARCHS key formats
        excluded_keys = config.build_settings.keys.select { |k| k.to_s.include?('EXCLUDED_ARCHS') }
        excluded_keys << 'EXCLUDED_ARCHS' unless excluded_keys.include?('EXCLUDED_ARCHS')
        
        excluded_keys.each do |excluded_key|
          excluded_archs = config.build_settings[excluded_key]
          
          # Handle both Array and String formats
          if excluded_archs.is_a?(Array)
            # If both arm64 and x86_64 are excluded, clear all exclusions (invalid config)
            if excluded_archs.include?('arm64') && excluded_archs.include?('x86_64')
              config.build_settings.delete(excluded_key)
              puts "  Fixed #{target.name}: Cleared invalid EXCLUDED_ARCHS (#{excluded_key})"
            # Remove arm64 if it's excluded (needed for Apple Silicon simulators)
            elsif excluded_archs.include?('arm64')
              excluded_archs.delete('arm64')
              config.build_settings[excluded_key] = excluded_archs
              puts "  Fixed #{target.name}: Removed arm64 from EXCLUDED_ARCHS"
            end
          elsif excluded_archs.is_a?(String)
            # Handle string format (space or comma separated)
            excluded_list = excluded_archs.split(/[\s,]+/).map(&:strip).reject(&:empty?)
            if excluded_list.include?('arm64') && excluded_list.include?('x86_64')
              config.build_settings.delete(excluded_key)
              puts "  Fixed #{target.name}: Cleared invalid EXCLUDED_ARCHS string (#{excluded_key})"
            elsif excluded_list.include?('arm64')
              excluded_list.delete('arm64')
              config.build_settings[excluded_key] = excluded_list.join(' ')
              puts "  Fixed #{target.name}: Removed arm64 from EXCLUDED_ARCHS string"
            end
          end
        end
        
        # Special aggressive fix for RNEnxRtc - force valid architecture settings
        if target.name == 'RNEnxRtc'
          # Delete ALL EXCLUDED_ARCHS keys completely (they cause invalid architecture errors)
          keys_to_delete = []
          config.build_settings.keys.each do |key|
            key_str = key.to_s
            if key_str.include?('EXCLUDED_ARCHS')
              keys_to_delete << key
            end
          end
          keys_to_delete.each do |key|
            config.build_settings.delete(key)
          end
          
          # Force ARCHS to use standard architectures (will auto-select arm64 or x86_64 as needed)
          config.build_settings['ARCHS'] = '$(ARCHS_STANDARD)'
          
          # Ensure VALID_ARCHS is set correctly
          config.build_settings['VALID_ARCHS'] = 'arm64 arm64e x86_64'
          
          # Ensure these are explicitly set to nil/empty to override any inherited values
          # Setting to empty array should work, but nil is safer
          ['EXCLUDED_ARCHS', 'EXCLUDED_ARCHS[sdk=iphonesimulator*]', 'EXCLUDED_ARCHS[sdk=iphonesimulator]'].each do |key|
            if config.build_settings[key].nil? || 
               (config.build_settings[key].is_a?(Array) && config.build_settings[key].include?('arm64') && config.build_settings[key].include?('x86_64'))
              config.build_settings[key] = []
            end
          end
          
          # Set ONLY_ACTIVE_ARCH to YES for Debug to speed up builds
          if config.name == 'Debug'
            config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
          else
            config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
          end
          
          puts "  Fixed RNEnxRtc [#{config.name}]: Deleted #{keys_to_delete.length} EXCLUDED_ARCHS keys, set ARCHS=$(ARCHS_STANDARD), cleared EXCLUDED_ARCHS"
        end
        
        # Suppress documentation and nullability warnings from third-party pods
        # Apply to both C and C++ flags
        ['WARNING_CFLAGS', 'OTHER_CFLAGS', 'OTHER_CPLUSPLUSFLAGS'].each do |flag_key|
          existing_flags = config.build_settings[flag_key] || '$(inherited)'
          # Add warning suppressions if not already present
          unless existing_flags.include?('-Wno-documentation')
            config.build_settings[flag_key] = "#{existing_flags} -Wno-documentation -Wno-documentation-deprecated-sync -Wno-nullability-completeness -Wno-deprecated-declarations"
          end
        end
      end
    end
  end
end
